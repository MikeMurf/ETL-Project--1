
DROP TABLE confirmed-cases CASCADE;
DROP TABLE deaths CASCADE;
DROP TABLE recovered CASCADE;
DROP TABLE vaccinations CASCADE;
DROP TABLE population CASCADE;


CREATE TABLE "confirmed-cases" (
    "province_state" varchar   NOT NULL,
    "country_region" varchar   NOT NULL,
    "lat" float NOT NULL,
    "lon" float NOT NULL,
    CONSTRAINT "pk_country_region" PRIMARY KEY (
        "country_region"
     )
);


CREATE TABLE "deaths" (
    "province_state" varchar   NOT NULL,
    "country_region" varchar   NOT NULL,
    "lat" float NOT NULL,
    "lon" float NOT NULL,
    CONSTRAINT "pk_country_region" PRIMARY KEY (
        "country_region"
     )
);"


CREATE TABLE "recovered" (
    "province_state" varchar   NOT NULL,
    "country_region" varchar   NOT NULL,
    "lat" float NOT NULL,
    "lon" float NOT NULL,
    CONSTRAINT "pk_country_region" PRIMARY KEY (
        "country_region"
     )
);"


CREATE TABLE "vaccine_data" (
    "province_state" varchar   NOT NULL,
    "country_region" varchar   NOT NULL,
    "date" date NOT NULL,
    "Doses_admin" int   NOT NULL,
    "partially_vac" int NOT Null,
    "fully_vac" int NOT NULL,
    "date_str" vadchar NOT NULL,
    "uid" int NOT NULL,
    CONSTRAINT "pk_province_state" PRIMARY KEY (
        "province_state"
     )
);"


CREATE TABLE "world_pop" (
    "country_name" varchar   NOT NULL,
    "country_code" varchar   NOT NULL,
    "indicator_code" varchar NOT NULL,
    "pop_year" int   NOT NULL,
    CONSTRAINT "pk_world_pop" PRIMARY KEY (
        "world_pop"
     )
);"



-- manually imported confirmed-cases
SELECT * FROM confirmed-cases
-- verified confirmed-cases

-- manually imported deaths
SELECT * FROM deaths LIMIT 10
-- verified deaths

-- manually imported recovered
SELECT * FROM recovered LIMIT 10
-- verified recovered


-- manually imported vaccine_data
SELECT * FROM vaccine_data LIMIT 10
-- verified vaccine_data


-- manually imported world_pop
SELECT * FROM world_pop LIMIT 10
-- verified world_pop


ALTER TABLE "confirmed-cases" ADD CONSTRAINT "fk_deaths" FOREIGN KEY("con_case_deaths_id")
REFERENCES "deaths" ("country_region");


ALTER TABLE "deaths" ADD CONSTRAINT "fk_conf_cases" FOREIGN KEY("deaths_conf_case_id")
REFERENCES "confirmed-cases" ("country_region");

ALTER TABLE "recovered" ADD CONSTRAINT "fk_conf_cases" FOREIGN KEY("rec_conf_case_id")
REFERENCES "confirmed-cases" ("country_region");


ALTER TABLE "vaccine" ADD CONSTRAINT "fk_conf_cases" FOREIGN KEY("vac_conf_case_id")
REFERENCES "confirmed-cases" ("country_region");





--DRAFT CODE TO ADAPT FOR OUR QUERIES *******************************************************************

--1.   List the following details of each employee: employee number, last name, first name, sex, and salary.
SELECT employees.emp_no, employees.last_name, employees.first_name, employees.gender, salaries.salary
FROM employees
JOIN salaries
ON employees.emp_no = salaries.emp_no
LIMIT (10);
-- returns 300,024 rows consistent with original csv file

--2.   List first name, last name, and hire date for employees who were hired in 1986.
SELECT first_name, last_name, hire_date 
FROM employees
WHERE hire_date BETWEEN '1/1/1986' AND '12/31/1986'
ORDER BY hire_date
LIMIT (10);
-- returns 36,150 rows

--3.   List the manager of each department with the following information: department number, department name, the manager's employee number, last name, first name.
SELECT departments.dept_no, departments.dept_name, dept_manager.emp_no, employees.last_name, employees.first_name
FROM departments
JOIN dept_manager
ON departments.dept_no = dept_manager.dept_no
JOIN employees
ON dept_manager.emp_no = employees.emp_no
LIMIT (10);
-- returns 24 rows

--4.   List the department of each employee with the following information: employee number, last name, first name, and department name.
SELECT dept_emps.emp_no, employees.last_name, employees.first_name, departments.dept_name
FROM dept_emps
JOIN employees
ON dept_emps.emp_no = employees.emp_no
JOIN departments
ON dept_emps.dept_no = departments.dept_no
LIMIT (10);
-- returns 331,603 rows

--5.  List first name, last name, and sex for employees whose first name is "Hercules" and last names begin with "B."
SELECT employees.first_name, employees.last_name, employees.gender
FROM employees
WHERE first_name = 'Hercules'
AND last_name Like 'B%'
LIMIT (10);
-- returns 20 rows

--6.   List all employees in the Sales department, including their employee number, last name, first name, and department name.
SELECT departments.dept_name, employees.last_name, employees.first_name
FROM dept_emps
JOIN employees
ON dept_emps.emp_no = employees.emp_no
JOIN departments
ON dept_emps.dept_no = departments.dept_no
WHERE departments.dept_name = 'Sales'
LIMIT (10);
-- returns 53,245 rows

--7.   List all employees in the Sales and Development departments, including their employee number, last name, first name, and department name.
SELECT employees.emp_no, employees.last_name, employees.first_name, departments.dept_name
FROM dept_emps
JOIN employees
ON dept_emps.emp_no = employees.emp_no
JOIN departments
ON dept_emps.dept_no = departments.dept_no
WHERE departments.dept_name = 'Sales' 
OR departments.dept_name = 'Development'
LIMIT (10);
-- returns 137,952 rows

--8.   In descending order, list the frequency count of employee last names, i.e., how many employees share each last name.
SELECT last_name,
COUNT(last_name) AS "frequency"
FROM employees
GROUP BY last_name
ORDER BY
COUNT(last_name) DESC
LIMIT (10);
-- 1638 rows
---------------------------END OF DATA ANALYSIS--------------------------------

-------------------------------START OF BONUS----------------------------------
--BONUS COMPLETED IN PANDAS - REFER ACCOMPANYING JUPYTER NOTEBOOK--------------





